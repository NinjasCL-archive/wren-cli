// Generated automatically from src/module/os.wren. Do not edit.
static const char* osModuleSource =
"class Platform {\n"
"  foreign static isPosix\n"
"  foreign static name\n"
"\n"
"  static isWindows { name == \"Windows\" }\n"
"}\n"
"\n"
"class Process {\n"
"  // TODO: This will need to be smarter when wren supports CLI options.\n"
"  static arguments { allArguments[2..-1] }\n"
"\n"
"  foreign static allArguments\n"
"  foreign static version\n"
"  foreign static cwd\n"
"  static env {Env.all}\n"
"}\n"
"\n"
"class Env {\n"
"  // Segmentation fault if name arg is null\n"
"  // so a wrapper is needed for public api\n"
"  foreign static envGet(name)\n"
"  static get(name) {\n"
"    if (name is String && name.trim().count > 0) {\n"
"      return envGet(name)\n"
"    }\n"
"    return \"\"\n"
"  }\n"
"\n"
"  foreign static envSet(name)\n"
"  static set(name) {\n"
"    if (name is String && name.trim().count > 0) {\n"
"      return envSet(name)\n"
"    }\n"
"    return false\n"
"  }\n"
"\n"
"  foreign static envRemove(name)\n"
"  static remove(name) {\n"
"    if (name is String && name.trim().count > 0) {\n"
"      return envRemove(name)\n"
"    }\n"
"    return false\n"
"  }\n"
"\n"
"  foreign static envGetAll\n"
"  static all {\n"
"    var env = {}\n"
"    Env.envGetAll.each{|name|\n"
"      env[name] = Env.get(name)\n"
"    }\n"
"    return env\n"
"  }\n"
"}";
